<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>愚钝的故事</title><link href="/" rel="alternate"></link><link href="/feeds/qian-duan.atom.xml" rel="self"></link><id>/</id><updated>2015-03-28T17:39:00+08:00</updated><entry><title>Angularjs中的动态切换服务</title><link href="/angularjszhong-de-dong-tai-qie-huan-fu-wu.html" rel="alternate"></link><updated>2015-03-28T17:39:00+08:00</updated><author><name>Jet Geng</name></author><id>tag:,2015-03-28:angularjszhong-de-dong-tai-qie-huan-fu-wu.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;需求&lt;/h2&gt;
&lt;p&gt;近期在用Angularjs做点小东西。在使用的过程中遇到如下的需求。
我想把运行环境分成开发（dev），测试(test), 线上(prod)这三个环境。在这三个不同的环境中有一些配置行为是不一样的。比如获取数据的地址了，登陆的方法等等。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;解题思路&lt;/h2&gt;
&lt;p&gt;由于有点Spring的使用经验，第一反应就是想动态替换Service。&lt;/p&gt;
&lt;p&gt;一般情况下在controller中注入服务，采用如下形式。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;someMoule&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,[])&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;someController&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someService&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;someService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如何动态的换掉someService呢？经过一番折腾以后，没有找到了合适的方法。&lt;/p&gt;
&lt;p&gt;所以穷极生变以后想到采用代理的方式解决这个问题。
于是有了下面的解决方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;解法&lt;/h2&gt;
&lt;p&gt;最终的解法是采用代理的方式。具体的结构如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;serviceMoule&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,[])&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;someService&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;devSomeService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;betaSomeService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prodSomeService&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;devSomeService&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;beta&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;betaSomeService&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;prod&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;prodSomeService&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;devSomeService&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; i am in dev env&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;betaSomeService&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; i am in dev env&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;prodSomeService&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; i am in dev env&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样使用的时候直接注入someService 这个服务。最终这个服务将会根据不同的开关来代理devSomeService, betaSomeService, prodSomeService 其中的一个。&lt;/p&gt;
&lt;p&gt;这个方法有点土，不过可以工作。如果你有什么更好的办法，欢迎指教！ 谢谢！&lt;/p&gt;
&lt;/div&gt;
</summary><category term="AngularJs"></category></entry><entry><title>ionic 项目的调试</title><link href="/ionic-xiang-mu-de-diao-shi.html" rel="alternate"></link><updated>2015-01-21T17:39:00+08:00</updated><author><name>Jet Geng</name></author><id>tag:,2015-01-21:ionic-xiang-mu-de-diao-shi.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;概述&lt;/h2&gt;
&lt;p&gt;在开发过程中，调试是一个非常重要的环境。调试的难易程度对开发效率有很大的影响。
在使用ionic 做开发的时候有如下几种调试方式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;通过浏览器调试&lt;/li&gt;
&lt;li&gt;通过 ionic run ios 命令在设备或模拟器中运行&lt;/li&gt;
&lt;li&gt;使用xcode或android 开发工具进行打包，安装部署到设备上。进行真机测试。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;这三种方式各有优缺，以及他们各自的适用场景。相互补充。所以下面分别对这三种方法进行说明。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;通过浏览器调试&lt;/h2&gt;
&lt;p&gt;ionic 程序本身的展现层是用Angular JS来写的。所以可以很方便的在浏览器中调试。具体调试方法如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;在项目目录中执行 &lt;strong&gt;ionic serve&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在chrome或firefox浏览器的调试工具中进行调试。&lt;/li&gt;
&lt;li&gt;注意查看console 控制台。所有错误信息都会在哪里出现。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;该方法的不足是：只能调试展现类的内容。牵涉到手机原生的功能就无法调试了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;在设备或模拟器中调试&lt;/h2&gt;
&lt;p&gt;这种方法调试刚好可以弥补在浏览器里调试的不足，可以测试和手机相关的功能。&lt;/p&gt;
&lt;p&gt;测试方法如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;进入项目目录。&lt;/li&gt;
&lt;li&gt;运行 &lt;strong&gt;ionic run ios -s -l -c&lt;/strong&gt; 这样的指令
#. -s 表示打印服务端的log
#. -c 表示打印客户端的log
#. -l 表示Live Reload。 就是说，你在电脑上对文件的改动，能立即反应到测试的手机上。&lt;/li&gt;
&lt;li&gt;根据各种log来调试你得程序。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;该测试方法的不足的地方如下：&lt;/dt&gt;
&lt;dd&gt;&lt;ol class="first last arabic simple"&gt;
&lt;li&gt;你需要拥有具体的设备。如果你想开发ios的程序的话。必须具备一个 装有Mac OSX系统的电脑(苹果机器，或黑苹果)，一个苹果的设备（iphone或ipad）， 一个开发者账户。&lt;/li&gt;
&lt;li&gt;需要让你的苹果设备和开发用的电脑在一个WiFi下。这样才能正常工作。原因是手机端的应用程序需要通过一个Websocket连接到开发用的电脑上。一旦电脑中的文件有变化，会立刻被刷新到手机上。&lt;/li&gt;
&lt;li&gt;他的测试结果不能100% 代表程序最终发布以后的结果。因为该方式获取资源的方式都是通过http访问开发用的电脑上，来获取资源。而正式的应用程序是从文件系统直接读取文件。在文件的获取上会存在差异。&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;通过原生的开发工具打包部署测试&lt;/h2&gt;
&lt;p&gt;这种方式是最后的测试。通过IDE环境打开特定platform下的项目对已有项目进行编译，部署，和执行。就像开发原生的程序一样。&lt;/p&gt;
&lt;p&gt;他的优点就是真实。不过在开始之前有一个小技巧需要了解。
就是如果刚使用第一种和第二种方法测试后，一定要在项目目录下执行如下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ionic prepare ios
&lt;span class="c"&gt;# 或者&lt;/span&gt;
ionic prepare android
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个语句是去除掉从远端获取资源。直接从本地读取。如果不执行，部署到设备上的程序将无法执行。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://ionicframework.com/blog/live-reload-all-things-ionic-cli/"&gt;http://ionicframework.com/blog/live-reload-all-things-ionic-cli/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/26314005/ionic-failed-to-load-webpage-with-error-could-not-connect-to-the-server"&gt;http://stackoverflow.com/questions/26314005/ionic-failed-to-load-webpage-with-error-could-not-connect-to-the-server&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</summary><category term="angular"></category></entry></feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>愚钝的故事</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2015-06-10T17:39:00+08:00</updated><entry><title>Grails 中服务懒加载</title><link href="/grails-zhong-fu-wu-lan-jia-zai.html" rel="alternate"></link><updated>2015-06-10T17:39:00+08:00</updated><author><name>Jet Geng</name></author><id>tag:,2015-06-10:grails-zhong-fu-wu-lan-jia-zai.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;现象&lt;/h2&gt;
&lt;p&gt;前两天在Grails中使用guava的EventBus做消息分发时发现我得一个Subscrib死活没有被调用。很时费解！&lt;/p&gt;
&lt;p&gt;我代码的结构如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HandlerAServices&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;eventBus&lt;/span&gt;

    &lt;span class="nd"&gt;@PostConstruct&lt;/span&gt;
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;eventBus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;register&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Subscribe&lt;/span&gt;
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;someEventHandler&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SomeEvent&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HandlerBServices&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;eventBus&lt;/span&gt;

    &lt;span class="nd"&gt;@PostConstruct&lt;/span&gt;
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;eventBus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;register&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Subscribe&lt;/span&gt;
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;someEventHandler&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SomeEvent&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后当有SomeEvent这个的事件发出时 发现HandlerBServices 中得someEventHandler 方法被调用，HandlerAServices 中的someEventHandler完全没有执行。 同样的代码，同样的配置啊。怎么会这么邪乎呢！&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;排查原因&lt;/h2&gt;
&lt;p&gt;因为grails中对service的初始化在默认情况下采用懒加载的方式。加入一个服务没有被其他的内容如controller，service， domain class等等引用。那么这个服务将不会在已启动的时候就被初始化。
我们的HandlerAServices 中 someEventHandler 没有被执行的原因就是这个HandlerAServices 没有被其他内容直接使用，导致这个HandlerAServices这个bean没有被创建。所以他就没有被调用了。&lt;/p&gt;
&lt;p&gt;为了解决这个问题要做的东西很少，只是告诉grails，我们不要懒加载的方式。修改代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HandlerAServices&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;lazyInit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="c1"&gt;//申明不需要懒加载&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://grails.1312388.n4.nabble.com/Is-it-possible-to-avoid-lazy-services-initialization-td4646285.html"&gt;http://grails.1312388.n4.nabble.com/Is-it-possible-to-avoid-lazy-services-initialization-td4646285.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/14832002/postconstruct-fails-silently-on-a-grails-service"&gt;http://stackoverflow.com/questions/14832002/postconstruct-fails-silently-on-a-grails-service&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</summary><category term="Gorm"></category><category term="Grails"></category></entry><entry><title>在redhat中安装postgresql</title><link href="/zai-redhatzhong-an-zhuang-postgresql.html" rel="alternate"></link><updated>2015-04-11T10:20:00+08:00</updated><author><name>Jet Geng</name></author><id>tag:,2015-04-11:zai-redhatzhong-an-zhuang-postgresql.html</id><summary type="html">&lt;p&gt;开始 &lt;a class="reference external" href="http://people.planetpostgresql.org/devrim/index.php?/archives/80-Installing-and-configuring-PostgreSQL-9.3-and-9.4-on-RHEL-7.html"&gt;http://people.planetpostgresql.org/devrim/index.php?/archives/80-Installing-and-configuring-PostgreSQL-9.3-and-9.4-on-RHEL-7.html&lt;/a&gt; 安装数据库。&lt;/p&gt;
&lt;p&gt;要注意特定的系统的版本&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://yum.postgresql.org/9.4/redhat/rhel-5.4-x86_64/pgdg-redhat94-9.4-1.noarch.rpm"&gt;http://yum.postgresql.org/9.4/redhat/rhel-5.4-x86_64/pgdg-redhat94-9.4-1.noarch.rpm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;查看linux是32还是64？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;file /bin/ls
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面去修改/etc/yum.repo.d 中的内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo yum install postgresql94.x86_64 postgresql94-contrib.x86_64 postgresql94-debuginfo.x86_64 postgresql94-devel.x86_64 postgresql94-docs.x86_64 postgresql94-libs.x86_64 postgresql94-server.x86_64
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;/sbin 必须放到path中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo service postgresql-9.4 initdb //初始化db
sudo service postgresql-9.4 start //启动数据库

&lt;span class="se"&gt;\c&lt;/span&gt; database_name //切换数据库
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用新用户登录数据库：postgresql Peer authentication failed for user&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/18664074/getting-error-peer-authentication-failed-for-user-postgres-when-trying-to-ge"&gt;http://stackoverflow.com/questions/18664074/getting-error-peer-authentication-failed-for-user-postgres-when-trying-to-ge&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;postgresql 的认证方式有多种方式：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;peer登录，这个就是和操作系统的用户一样。&lt;/li&gt;
&lt;li&gt;md5 就是通过用户名和密码登录。&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="sql"></category></entry><entry><title>Grails代码阅读</title><link href="/grailsdai-ma-yue-du.html" rel="alternate"></link><updated>2015-04-05T18:40:00+08:00</updated><author><name>Jet Geng</name></author><id>tag:,2015-04-05:grailsdai-ma-yue-du.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;启动&lt;/h2&gt;
&lt;p&gt;Grails启动相关的内容是在 grails-bootstrap 中体现的。
所有命令行的启动都是通过GrailsScriptRunner来完成。本质上找到对应的脚本，然后去执行。executeCommand来执行脚本。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Grails"></category><category term="CodeRead"></category></entry><entry><title>JPush ios 配置过程</title><link href="/jpush-ios-pei-zhi-guo-cheng.html" rel="alternate"></link><updated>2015-03-31T18:40:00+08:00</updated><author><name>Jet Geng</name></author><id>tag:,2015-03-31:jpush-ios-pei-zhi-guo-cheng.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;准备条件&lt;/h2&gt;
&lt;p&gt;JPush推送本质上还是使用的apple的apn服务。 所以apn所需要的所有东西，他都需要。比如证书之类的。
而且这一部分在网上已经有很完毕的描述了。我简单的列举一下我读过的一些东西。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.csdn.net/showhilllee/article/details/8631734"&gt;一步一步教你做ios推送&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://tanqisen.github.io/blog/2013/02/27/ios-push-apns/"&gt;一步一步实现iOS应用PUSH功能&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过阅读以上的文章确认我们需要的内容如下：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;在苹果开发者账户中生成 appid。&lt;/li&gt;
&lt;li&gt;在苹果开发者中心生成对应环境的推送证书。&lt;/li&gt;
&lt;li&gt;下载证书，导出成p12文件。&lt;/li&gt;
&lt;li&gt;上传证书到jpush平台。&lt;/li&gt;
&lt;li&gt;把jpush的 phone-gap。 &lt;a class="reference external" href="https://github.com/jpush/jpush-phonegap-plugin"&gt;https://github.com/jpush/jpush-phonegap-plugin&lt;/a&gt;  插件加入到项目中&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;开始干活&lt;/h2&gt;
&lt;p&gt;生成证书的之类的具体操作就不多说了。只是把我遇到的坑说出来。这样大家就可以不用重复我踩过的坑了。&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;安装证书 -- 第一个坑&lt;/h3&gt;
&lt;p&gt;下载完在苹果开发者中心的证书，大家都说通过 &lt;strong&gt;双击&lt;/strong&gt; 来安装到 Mac 上的钥匙串程序中。这里我没有能够安装成功。
我的解决办法是在钥匙串中选中 &lt;strong&gt;登陆&lt;/strong&gt; , 从Finder中将证书拖拽到钥匙串中。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="jpush"&gt;
&lt;h3&gt;上传证书到JPush平台&lt;/h3&gt;
&lt;p&gt;这个问题折腾了很久。在上传证书的时候有两点需要注意：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;如果导出的时候设定密码了。密码一定要填写。&lt;/li&gt;
&lt;li&gt;注意测试环境和生产环境证书不一样&lt;/li&gt;
&lt;li&gt;导出证书的时候选中证书就是下面图中方块选中的部分，而不是下面的秘钥。如下图所示：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="figure"&gt;
&lt;img alt="" src="../images/ios_zhengshu.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ionic"&gt;
&lt;h3&gt;修改ionic项目&lt;/h3&gt;
&lt;p&gt;这个地方我不得不吐槽一下，理论上只需要使用 &lt;strong&gt;ionic add plugin jpush&lt;/strong&gt; 这样就可以完成安装动作。
但是jpush现在不行。那就先手动改吧！&lt;/p&gt;
&lt;p&gt;需要修改的文章有两个，一个是 PushConfig.plist.
写入两个值：&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;APP_KEY&lt;/dt&gt;
&lt;dd&gt;在JPush中的appKey。&lt;/dd&gt;
&lt;dt&gt;CHANNEL&lt;/dt&gt;
&lt;dd&gt;这个值只是用来统计的。可以根据公司的规则设定。不影响发送功能。&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;修改AppDelegate.m 这个文件&lt;/p&gt;
&lt;p&gt;在文件开始加入导入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;import &amp;quot;APService.h&amp;quot;
import &amp;quot;JPushPlugin.h&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他地方按照 &lt;a class="reference external" href="https://github.com/jpush/jpush-phonegap-plugin"&gt;https://github.com/jpush/jpush-phonegap-plugin&lt;/a&gt; IOS手工安装 这个地方就可以了。千万不要按照 &lt;strong&gt;IOS使用PhoneGap/Cordova CLI自动安装&lt;/strong&gt; 中的修改文件的方法修改。他的那个&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {
 // Required
 [APService handleRemoteNotification:userInfo];
 [[NSNotificationCenter defaultCenter] postNotificationName: kJPushPluginReceiveNotification
 //这个 kJPushPluginReceiveNotification 是错误的，没有定义。 要将这一句去掉。
                                                     object:userInfo];

 }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="ios"></category><category term="push"></category></entry><entry><title>Angularjs中的动态切换服务</title><link href="/angularjszhong-de-dong-tai-qie-huan-fu-wu.html" rel="alternate"></link><updated>2015-03-28T17:39:00+08:00</updated><author><name>Jet Geng</name></author><id>tag:,2015-03-28:angularjszhong-de-dong-tai-qie-huan-fu-wu.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;需求&lt;/h2&gt;
&lt;p&gt;近期在用Angularjs做点小东西。在使用的过程中遇到如下的需求。
我想把运行环境分成开发（dev），测试(test), 线上(prod)这三个环境。在这三个不同的环境中有一些配置行为是不一样的。比如获取数据的地址了，登陆的方法等等。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;解题思路&lt;/h2&gt;
&lt;p&gt;由于有点Spring的使用经验，第一反应就是想动态替换Service。&lt;/p&gt;
&lt;p&gt;一般情况下在controller中注入服务，采用如下形式。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;someMoule&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,[])&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;someController&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someService&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;someService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如何动态的换掉someService呢？经过一番折腾以后，没有找到了合适的方法。&lt;/p&gt;
&lt;p&gt;所以穷极生变以后想到采用代理的方式解决这个问题。
于是有了下面的解决方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;解法&lt;/h2&gt;
&lt;p&gt;最终的解法是采用代理的方式。具体的结构如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;serviceMoule&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,[])&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;someService&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;devSomeService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;betaSomeService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prodSomeService&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;devSomeService&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;beta&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;betaSomeService&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;prod&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;prodSomeService&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;devSomeService&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; i am in dev env&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;betaSomeService&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; i am in dev env&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;prodSomeService&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; i am in dev env&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样使用的时候直接注入someService 这个服务。最终这个服务将会根据不同的开关来代理devSomeService, betaSomeService, prodSomeService 其中的一个。&lt;/p&gt;
&lt;p&gt;这个方法有点土，不过可以工作。如果你有什么更好的办法，欢迎指教！ 谢谢！&lt;/p&gt;
&lt;/div&gt;
</summary><category term="AngularJs"></category></entry><entry><title>ionic 项目的调试</title><link href="/ionic-xiang-mu-de-diao-shi.html" rel="alternate"></link><updated>2015-01-21T17:39:00+08:00</updated><author><name>Jet Geng</name></author><id>tag:,2015-01-21:ionic-xiang-mu-de-diao-shi.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;概述&lt;/h2&gt;
&lt;p&gt;在开发过程中，调试是一个非常重要的环境。调试的难易程度对开发效率有很大的影响。
在使用ionic 做开发的时候有如下几种调试方式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;通过浏览器调试&lt;/li&gt;
&lt;li&gt;通过 ionic run ios 命令在设备或模拟器中运行&lt;/li&gt;
&lt;li&gt;使用xcode或android 开发工具进行打包，安装部署到设备上。进行真机测试。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;这三种方式各有优缺，以及他们各自的适用场景。相互补充。所以下面分别对这三种方法进行说明。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;通过浏览器调试&lt;/h2&gt;
&lt;p&gt;ionic 程序本身的展现层是用Angular JS来写的。所以可以很方便的在浏览器中调试。具体调试方法如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;在项目目录中执行 &lt;strong&gt;ionic serve&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在chrome或firefox浏览器的调试工具中进行调试。&lt;/li&gt;
&lt;li&gt;注意查看console 控制台。所有错误信息都会在哪里出现。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;该方法的不足是：只能调试展现类的内容。牵涉到手机原生的功能就无法调试了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;在设备或模拟器中调试&lt;/h2&gt;
&lt;p&gt;这种方法调试刚好可以弥补在浏览器里调试的不足，可以测试和手机相关的功能。&lt;/p&gt;
&lt;p&gt;测试方法如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;进入项目目录。&lt;/li&gt;
&lt;li&gt;运行 &lt;strong&gt;ionic run ios -s -l -c&lt;/strong&gt; 这样的指令
#. -s 表示打印服务端的log
#. -c 表示打印客户端的log
#. -l 表示Live Reload。 就是说，你在电脑上对文件的改动，能立即反应到测试的手机上。&lt;/li&gt;
&lt;li&gt;根据各种log来调试你得程序。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;该测试方法的不足的地方如下：&lt;/dt&gt;
&lt;dd&gt;&lt;ol class="first last arabic simple"&gt;
&lt;li&gt;你需要拥有具体的设备。如果你想开发ios的程序的话。必须具备一个 装有Mac OSX系统的电脑(苹果机器，或黑苹果)，一个苹果的设备（iphone或ipad）， 一个开发者账户。&lt;/li&gt;
&lt;li&gt;需要让你的苹果设备和开发用的电脑在一个WiFi下。这样才能正常工作。原因是手机端的应用程序需要通过一个Websocket连接到开发用的电脑上。一旦电脑中的文件有变化，会立刻被刷新到手机上。&lt;/li&gt;
&lt;li&gt;他的测试结果不能100% 代表程序最终发布以后的结果。因为该方式获取资源的方式都是通过http访问开发用的电脑上，来获取资源。而正式的应用程序是从文件系统直接读取文件。在文件的获取上会存在差异。&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;通过原生的开发工具打包部署测试&lt;/h2&gt;
&lt;p&gt;这种方式是最后的测试。通过IDE环境打开特定platform下的项目对已有项目进行编译，部署，和执行。就像开发原生的程序一样。&lt;/p&gt;
&lt;p&gt;他的优点就是真实。不过在开始之前有一个小技巧需要了解。
就是如果刚使用第一种和第二种方法测试后，一定要在项目目录下执行如下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ionic prepare ios
&lt;span class="c"&gt;# 或者&lt;/span&gt;
ionic prepare android
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个语句是去除掉从远端获取资源。直接从本地读取。如果不执行，部署到设备上的程序将无法执行。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://ionicframework.com/blog/live-reload-all-things-ionic-cli/"&gt;http://ionicframework.com/blog/live-reload-all-things-ionic-cli/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/26314005/ionic-failed-to-load-webpage-with-error-could-not-connect-to-the-server"&gt;http://stackoverflow.com/questions/26314005/ionic-failed-to-load-webpage-with-error-could-not-connect-to-the-server&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</summary><category term="angular"></category></entry><entry><title>Groovy小技巧</title><link href="/groovyxiao-ji-qiao.html" rel="alternate"></link><updated>2014-12-27T17:39:00+08:00</updated><author><name>Jet Geng</name></author><id>tag:,2014-12-27:groovyxiao-ji-qiao.html</id><summary type="html">&lt;p&gt;会持续收集一些认为不错的Groovy小技巧。防止被遗忘！&lt;/p&gt;
</summary><category term="Gorm"></category><category term="Grails"></category></entry><entry><title>Grails 技巧汇集</title><link href="/grails-ji-qiao-hui-ji.html" rel="alternate"></link><updated>2014-12-14T17:39:00+08:00</updated><author><name>Jet Geng</name></author><id>tag:,2014-12-14:grails-ji-qiao-hui-ji.html</id><summary type="html">&lt;div class="section" id="service"&gt;
&lt;h2&gt;Service 相关&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;配置相关&lt;/h2&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;获取当前环境&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;grails&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Environment&lt;/span&gt;
&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;currentEnvName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;current&lt;/span&gt;
&lt;span class="c1"&gt;// currentEnvName 有可能是： &amp;quot;production&amp;quot; 线上环境&lt;/span&gt;
&lt;span class="c1"&gt;//                            &amp;#39;beta&amp;#39;    beta环境&lt;/span&gt;
&lt;span class="c1"&gt;//                            &amp;#39;dev&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;读取配置信息&lt;/h2&gt;
&lt;p&gt;在Config.groovy文件中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;property&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;some value&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;读取配置的任何地方:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;grailsApplication&lt;/span&gt;

&lt;span class="n"&gt;grailsApplication&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;my&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;property&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Gorm"></category><category term="Grails"></category></entry><entry><title>在CentOS上安装Redis</title><link href="/zai-centosshang-an-zhuang-redis.html" rel="alternate"></link><updated>2014-09-14T17:39:00+08:00</updated><author><name>Jet Geng</name></author><id>tag:,2014-09-14:zai-centosshang-an-zhuang-redis.html</id><summary type="html">&lt;p&gt;redis 用的人越来越到。他在linux上安装也很简单。官方文档http://redis.io/topics/quickstart 已经说的很清楚了。&lt;/p&gt;
&lt;p&gt;不过在CentOS 上遇到了问题。我的CentOS是一个很干净的系统，没有装过任何其他的东西。所以编译用的gcc 都没有。在Debian 系统中一句 &lt;tt class="docutils literal"&gt;` &lt;span class="pre"&gt;apt-get&lt;/span&gt;&amp;nbsp; &lt;span class="pre"&gt;build-essential&lt;/span&gt; `&lt;/tt&gt; 就可以搞定一切了。
在CentOs中是不是有对应的呢，当然是有了！&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo yum groupinstall &lt;span class="s2"&gt;&amp;quot;Development Tools&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就搞定了！ 可以继续使用make命令来执行了。&lt;/p&gt;
&lt;p&gt;不过要命的是我用的是CentOS release 6.5 (Final) 遇到了他的那个 #error &amp;quot;Newer version of jemalloc required&amp;quot; 错误。这个是让我升级jemalloc的节奏啊。&lt;/p&gt;
&lt;p&gt;我去那里找这个jemalloc啊？不要找其实已经有了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;deps
make hiredis jemalloc linenoise lua
&lt;span class="nb"&gt;cd&lt;/span&gt; ..
make install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个事情就这么搞定了！&lt;/p&gt;
&lt;p&gt;这个解决方案源自 &lt;a class="reference external" href="http://unix.stackexchange.com/questions/94479/jemalloc-and-other-errors-making-redis-on-centos-6-4"&gt;http://unix.stackexchange.com/questions/94479/jemalloc-and-other-errors-making-redis-on-centos-6-4&lt;/a&gt;&lt;/p&gt;
</summary><category term="Gorm"></category><category term="Grails"></category></entry><entry><title>使用Redis让Shiro实现集群</title><link href="/shi-yong-redisrang-shiroshi-xian-ji-qun.html" rel="alternate"></link><updated>2014-09-07T17:39:00+08:00</updated><author><name>Jet Geng</name></author><id>tag:,2014-09-07:shi-yong-redisrang-shiroshi-xian-ji-qun.html</id><summary type="html">&lt;p&gt;在使用shiro是一个很不错的权限验证框架。我们要在一个多机同时活的结构中使用他来做权限管理。这里就牵涉到一个认证Session共享的问题。我们决定使用redis作为这个Session存储的介质。
所以在github上发现了https://github.com/alexxiyang/shiro-redis 这个项目。这个项目基本上解决了我的问题。
不过在使用的过程中也遇到了一下问题。下面一一说明。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;配置中的坑&lt;/h2&gt;
&lt;p&gt;按照项目中的配置起初没有跑起来，没有跑起来的原因是session老是找不到。原因是Shiro的session id老是和系统的session id冲掉，在直接使用内存缓存的时候ok，换成了redis的时候就不行了。
所以我就根据 &lt;a class="reference external" href="http://www.cnblogs.com/xguo/p/3209529.html"&gt;http://www.cnblogs.com/xguo/p/3209529.html&lt;/a&gt; 的提示将 &lt;a class="reference external" href="https://github.com/alexxiyang/shiro-redis"&gt;shiro-redis&lt;/a&gt; 中的配置改成如下内容：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;bean&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wapsession&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;org.apache.shiro.web.servlet.SimpleCookie&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;constructor-arg&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;WAPSESSIONID&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- redisSessionDAO --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;bean&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;redisSessionDAO&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;org.crazycake.shiro.RedisSessionDAO&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;redisManager&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;redisManager&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- sessionManager --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;bean&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sessionManager&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;org.apache.shiro.web.session.mgt.DefaultWebSessionManager&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sessionDAO&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;redisSessionDAO&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sessionIdCookie&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wapsession&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- cacheManager --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;bean&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cacheManager&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;org.crazycake.shiro.RedisCacheManager&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;redisManager&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;redisManager&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;这样所有问题就解决了，可以正常的在多机器的情况下登陆，登出了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;性能的坑&lt;/h2&gt;
&lt;p&gt;正当我高兴的时候发现前台的页面变得非常非常的慢。一次请求搞到了1~2秒，天哪这个要用户怎么可能接受，最起码我自己这儿就无法接受了。找原因去，最后发现是在一次的shiro的认证过程中 他要十几次的访问RedisSessionDAO的doReadSession方法，在doReadSession方法中直接访问redis。 也就是说在一次认证过程中，需要访问redis 十几次，在我的屌丝网络中一次访问redis是需要100ms的，十来次就是1000个ms啊。
所以我决定给这个在内存中加一个简单的缓冲，确保一次认证的过程中只是去redis取一次，最多2次就ok。所以我选用了guava中的Cache，他使用简单，无需配置，适用我这个场合。
所以就有了 pull request &lt;a class="reference external" href="https://github.com/alexxiyang/shiro-redis/pull/3"&gt;https://github.com/alexxiyang/shiro-redis/pull/3&lt;/a&gt; 。
这样一来，我们页面的访问速度就一下子回到了200 ~ 300 ms了。这个时间范围用户应该还是可以接受的。&lt;/p&gt;
&lt;p&gt;在这里非常感谢alex 贡献了他的项目，感谢aliencode的 《Apache-Shiro+Zookeeper系统集群安全解决方案之会话管理》 一文，帮助我找到了cookie冲突的问题。
另外alex在写这篇博客的时候已经同意将我的代码合并到 &lt;a class="reference external" href="https://github.com/alexxiyang/shiro-redis"&gt;shiro-redis&lt;/a&gt; 分支中去。欢迎大家使用这个项目！&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Gorm"></category><category term="Grails"></category></entry><entry><title>在Grails使用Sql获取数据</title><link href="/zai-grailsshi-yong-sqlhuo-qu-shu-ju.html" rel="alternate"></link><updated>2014-06-12T17:39:00+08:00</updated><author><name>Jet Geng</name></author><id>tag:,2014-06-12:zai-grailsshi-yong-sqlhuo-qu-shu-ju.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;前因&lt;/h2&gt;
&lt;p&gt;Grails默认情况使用Hibernate作为数据存取的框架。不过Hibernate的缺点是众所周知的。所以我们在一些复杂的场合需要通过 groovy.sql.Sql 直接使用sql来获取数据。这样就会存在如下的问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;如何使用Grails配置的数据库连接?&lt;/li&gt;
&lt;li&gt;如何执行sql，进行数据库相关操作?&lt;/li&gt;
&lt;li&gt;如何将查询的数据转换成Domain Class?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面就从上面这3个问题来说明如何在grails环境中直接使用sql来对数据库进行操作。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;连接数据库&lt;/h2&gt;
&lt;p&gt;连接数据库相对来说比较简单，通过如下代码就可以完成。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DoSomethingServices&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;dataSource&lt;/span&gt;

    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;queryDataWithSql&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;Sql&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Sql&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;each&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;select * from sometable&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;println&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;代码详细说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;第3行 注入dataSource， 这个dataSource 就是Grails中在DataSource.groovy中配置的 数据源。 默认的hibernate也是在使用这个数据源。&lt;/li&gt;
&lt;li&gt;第5 行 使用通过注入的dataSource对象 创建sql对象。 关于Sql对象的使用可以参考 &lt;a class="reference external" href="http://groovy.codehaus.org/api/groovy/sql/Sql.html"&gt;http://groovy.codehaus.org/api/groovy/sql/Sql.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;第6行 使用each方法执行一个sql语句。然后逐行回调。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;连接数据库和查询数据就这么简单。&lt;/p&gt;
&lt;p&gt;到这里肯定有人会问，如果需要往sql语句中加入参数怎么办。如何避免 Sql注入。
这个Sql在设计的过程中已经考虑到了。而且使用及其简单。只要使用如下代码即可。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;queryDataWithSql&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;Sql&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Sql&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;paramValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;
        &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;paramValue2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;
        &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;each&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;select * from sometable where field = ${paramValue} and field2 = ${paramValue2}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;println&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;第5行直接使用GString传入参数。最终执行的时候其实是讲GString中得参数获取出来。通过PreparedStatement传入参数的方式。这样可以避免sql的注入的攻击。你不相信？那就看看Sql.java这个类中得eachRow方法吧。这个方法位于groovy-all-2.1.9-source.jar/groovy/sql/Sql.java 的第1236行。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="domain-class"&gt;
&lt;h2&gt;数据如何转换成Domain Class对象&lt;/h2&gt;
&lt;p&gt;这个问题是一个大问题。不过不是没有办法。最笨的办法就是写成如下的样子：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;each&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;select field1 , field2 from sometable where field = ${paramValue} and field2 = ${paramValue2}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
   &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;someDomain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SomeDomin&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
   &lt;span class="n"&gt;someDomain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;field1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
   &lt;span class="n"&gt;someDomain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;field2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;field2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;这个方法最大的缺点是代码量多，并且会有大量重复的代码。给人感觉很恶心。
在Groovy中又如下的办法可以对对象的字段赋值：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;
 &lt;span class="n"&gt;someDomain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProperties&lt;/span&gt;&lt;span class="o"&gt;()[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;someValue&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;getProperties这个方法将该对象的所有值放到一个Map中返回。具体可参考http://groovy.codehaus.org/groovy-jdk/java/lang/Object.html#getProperties%28%29 对这个map进行赋值，就等于对这个对象进行赋值。
所以下面我只要有一个字段和变量名对应的map，什么就会搞定了。
于是有了如下的代码：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DomainClassInfoService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sessionFactory&lt;/span&gt;
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;grailsApplication&lt;/span&gt;

    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getDomainClass&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clazzName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;grailsApplication&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;domainClasses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;clazzName&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getFieldColumnMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clazz&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;fieldColumnMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[:]&lt;/span&gt;
        &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;hibernateMetaClass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sessionFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getClassMetadata&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clazz&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;grailsDomainClass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getDomainClass&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clazz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSimpleName&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
        &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;domainProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;grailsDomainClass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProperties&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;domainProps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;each&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;prop&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="c1"&gt;//get the property&amp;#39;s name&lt;/span&gt;
            &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;propName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
            &lt;span class="c1"&gt;//please refer to the hibernate javadoc&lt;/span&gt;
            &lt;span class="c1"&gt;//http://www.hibernate.org/hib_docs/v3/api/org/hibernate/persister/entity/AbstractEntityPersister.html&lt;/span&gt;
            &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;columnProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hibernateMetaClass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPropertyColumnNames&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;propName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columnProps&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;columnProps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;//get the columnname, which is stored into the first array&lt;/span&gt;
                &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;columnName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;columnProps&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;fieldColumnMap&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;propName&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;columnName&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fieldColumnMap&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;dl class="docutils"&gt;
&lt;dt&gt;以上代码说明如下：&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;5 ~ 6 行注入将要使用的两个服务，一个是hibernate的sessionFactory， 另外一个是grailsApplication 上下文&lt;/li&gt;
&lt;li&gt;7 ~ 9 这个方法是根据给定的段类名。比如有一个Domain Class的全名为 org.gunn.domain.Book 这里的clazzName 就是Book。
* 第 8 行是从grailsApplication中获取所有Domain Class的DefaultGrailsDomainClass这个类的对象。这里牵涉到一个Artefact的概念，请参考 &lt;a class="reference external" href="https://grails.org/Developer+-+Artefact+API"&gt;https://grails.org/Developer+-+Artefact+API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;12 ~ 28 行就是 根据Domain Class中的变量来获取数据库对应的的字段名。 有代码在这里就不多解释了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;结合我们上面的那个properties的小技巧，我们就使用如下代码来完成使用Sql查询数据，转换成Domain Class的对象。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;querySql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39; select * from table where field1 = ? &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;tripSegmentFieldColumnMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;domainClassInfoService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFieldColumnMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SomeDomain&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Sql&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Sql&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;eachRow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;querySql&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field1Value&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
   &lt;span class="n"&gt;SomeDomain&lt;/span&gt; &lt;span class="n"&gt;someObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SomeDomain&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
   &lt;span class="n"&gt;tripSegmentFieldColumnMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;each&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;someObject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProperties&lt;/span&gt;&lt;span class="o"&gt;()[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;这个方法对于非关系的，没有太大问题。如果有类似于一对多这样的关系的话，会引起hibernate中著名的n+1的问题。例如SomeDomain 中有一个变量是SomeParent, 并且SomeDomain belong to 这个SomeParent的话。那么像上面那样直接赋值就会引起去发起数据库查询请求查询SomeParent的。所以可以使用如下的方式进行避免：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;eachRow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;querySql&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field1Value&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
   &lt;span class="n"&gt;SomeDomain&lt;/span&gt; &lt;span class="n"&gt;someObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SomeDomain&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
   &lt;span class="n"&gt;SomeParent&lt;/span&gt; &lt;span class="n"&gt;someParent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SomeParent&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
   &lt;span class="n"&gt;someParent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parentId&lt;/span&gt;
   &lt;span class="n"&gt;tripSegmentFieldColumnMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;each&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;parentId&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;someObject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProperties&lt;/span&gt;&lt;span class="o"&gt;()[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="n"&gt;someObject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;someParent&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个办法很土，如果你又更好的。欢迎分享！谢谢！&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Sql"></category><category term="Grails"></category></entry><entry><title>Grails从2.2升级到2.3.3遇到的问题</title><link href="/grailscong-22sheng-ji-dao-233yu-dao-de-wen-ti.html" rel="alternate"></link><updated>2014-03-21T17:39:00+08:00</updated><author><name>Jet Geng</name></author><id>tag:,2014-03-21:grailscong-22sheng-ji-dao-233yu-dao-de-wen-ti.html</id><summary type="html">&lt;div class="section" id="debug"&gt;
&lt;h2&gt;Debug&lt;/h2&gt;
&lt;p&gt;升级到2.3 以后我就找不到grails-debug 这个命令了。后进过查询发现原来是被 &lt;tt class="docutils literal"&gt;grails &lt;span class="pre"&gt;-debug&lt;/span&gt;&lt;/tt&gt; 这个参数替代了。是要了这个参数以后又遇到一个问题。就是需要通过Remote Debug 的方式连接进去才可以。但是不管咋地都不在断点处停下来。真的让人抓狂。&lt;/p&gt;
&lt;p&gt;最后通过这个一个老外的一段话给解决了&lt;/p&gt;
&lt;blockquote&gt;
In Intellij  go to &amp;quot;Run / Edit Configurations&amp;quot;, click + then &amp;quot;Remote&amp;quot; and name it whatever  you want (example &amp;quot;Grails Remote&amp;quot;) then press ok.
Then from the command line do:
grail run-app --debug-fork
Attach your debugger by running your &amp;quot;Grails Remote&amp;quot; config. Done.&lt;/blockquote&gt;
&lt;p&gt;原来是需要使用 grails run-app --debug-fork 命令来做。解了，亲测！&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Grails"></category></entry></feed>